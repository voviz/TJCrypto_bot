from aiogram import types

import re

from config import ADMIN_IDS
from load_all import dp, bot, db, fee_rate
from aiogram.dispatcher import FSMContext
from converter import get_coin_to_usd, get_currency_to_usd
from states import CardAdd, CardEdit

cancel_card_add_btn = types.InlineKeyboardButton(text='üö´–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã', callback_data='cancel_add_button')
cancel_card_add_markup = types.InlineKeyboardMarkup().add(cancel_card_add_btn)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data == 'start_execution', state="*")
async def handle_start_exec(call: types.CallbackQuery, state: FSMContext):
    client_id = get_id_from_message(call.message.text)
    unique_id = get_unique_id_from_message(call.message.text)

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑ –∫–æ–Ω—á–∏–ª–æ—Å—å
    if db.get_status(unique_id) != 'payment':
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text="–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ.")

        await state.finish()
        return

    # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —Ç–æ –Ω–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å
    if db.get_executor(unique_id):
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text="–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è"
                                         "—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ò–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ.")
        await state.finish()
        return

    # –í–∑—è–ª –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
    confirm_payment_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ',
                                                                                         callback_data='confirm_payment'))
    db.set_executor(unique_id, call.from_user.id)
    message_order = await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                                text=f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑ Q{unique_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è N'
                                                     f'{client_id}\n\n–û–∂–∏–¥–∞–π—Ç–µ '
                                                     f'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{db.get_sum_to_pay(client_id)}</b>\n\n–ù–∞ –∫–∞—Ä—Ç—É:'
                                                     f' {db.get}',
                                                parse_mode='html',
                                                reply_markup=confirm_payment_markup)
    db.set_admin_message_order(unique_id, message_order.message_id)
    await state.finish()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data == 'confirm_payment', state='*')
async def handle_confirm_payment(call: types.CallbackQuery, state: FSMContext):
    client_id = get_id_from_message(call.message.text)
    unique_id = get_unique_id_from_message(call.message.text)

    await bot.delete_message(chat_id=client_id, message_id=db.get_user_message_order(unique_id))
    await bot.delete_message(chat_id=client_id, message_id=db.get_user_message_card(unique_id))
    await bot.send_message(chat_id=client_id, text=f"–í–Ω–µ—Å–µ–Ω–∞ —Å—É–º–º–∞ {db.get_sum_to_pay(client_id)} —Å–æ–º.")
    await state.storage.reset_state(chat=client_id)

    sent_btc = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏–ª BTC", callback_data='sent_btc'))
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–º–æ–ª–∏ —É –∑–∞–∫–∞–∑–∞ Q{unique_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è N{client_id}.'
                                     f'\n\n–û—Ç–ø—Ä–∞–≤—å {db.get_sum_btc(client_id)} BTC –Ω–∞ –∫–æ—à–µ–ª–µ–∫:', reply_markup=sent_btc)
    message_wallet = await bot.send_message(chat_id=call.from_user.id, text=f'{db.get_wallet(client_id)}')
    message_sum = await bot.send_message(chat_id=call.from_user.id, text=f'{db.get_sum_btc(client_id)}')

    db.set_admin_messages_to_delete(unique_id, message_wallet.message_id, message_sum.message_id)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É –∑–∞–∫–∞–∑–∞
    db.change_status(unique_id, 'payment_approved')


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏—Ç–∫–∞
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data == 'sent_btc', state='*')
async def handle_sent_btc(call: types.CallbackQuery):
    client_id = get_id_from_message(call.message.text)
    unique_id = get_unique_id_from_message(call.message.text)

    await bot.send_message(chat_id=client_id, text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{unique_id} –∏—Å–ø–æ–ª–Ω–µ–Ω–∞!\n\n–ù–∞ –í–∞—à –∫–æ—à–µ–ª–µ–∫: <code>'
                                                   f'{db.get_active_wallet(unique_id)}</code>\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—É–º–º–∞:'
                                                   f' {db.get_active_sum_btc(unique_id)} BTC.\n\n–í—Å–µ –æ–±–º–µ–Ω—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ'
                                                   f' 1-6 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ—Ç —Å–µ—Ç–∏, –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, '
                                                   f'–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –∫–æ—à–µ–ª—ë–∫.\n\n–í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è BTC –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π'
                                                   f' –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç <b>–æ—Ç 20 –¥–æ 40 –º–∏–Ω.</b>\n\n'
                                                   f'–í —Å–ª—É—á–∞—è—Ö –∂–µ, –∫–æ–≥–¥–∞ —Å–µ—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–º–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ '
                                                   f'–º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤.\n\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '
                                                   f'<b>–ù–ï –ó–ê–í–ò–°–ò–¢</b> –æ—Ç –Ω–∞—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é'
                                                   f' –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.', parse_mode='html')

    await bot.delete_message(chat_id=call.from_user.id, message_id=db.get_admin_message_sum(unique_id))
    await bot.delete_message(chat_id=call.from_user.id, message_id=db.get_admin_message_wallet(unique_id))
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=f'‚úÖ–ó–∞–∫–∞–∑ Q{unique_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–°—É–º–º–∞ '
                                     f'{float(db.get_active_sum_btc(unique_id)) * get_coin_to_usd("btc") * get_currency_to_usd("tjs") * fee_rate:.0f} —Å–æ–º.')

    db.change_status(unique_id, 'completed')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, commands=['add_card', 'cards'])
async def handle_add_card(message: types.Message, state: FSMContext):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    if message.text == '/add_card':
        edit_message = await bot.send_message(message.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã',
                                              reply_markup=cancel_card_add_markup)
        await CardAdd.EnterCardName.set()
        await state.update_data(edit_message_id=edit_message.message_id, edit_message_text=edit_message.text)

    # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
    if message.text == '/cards':
        cards = db.get_cards()
        cards_list_markup = types.InlineKeyboardMarkup()
        for card in cards:
            cards_list_markup.add(
                types.InlineKeyboardButton(text=card[0] + f' ({card[2]} —Å–æ–º.)', callback_data=card[1] + 'C'))

        await bot.send_message(message.from_user.id, text=f'–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç', reply_markup=cards_list_markup)


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç—ã –¥–ª—è –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data in [card[1] + 'C' for card in db.get_cards()])
async def handle_card_edit(call: types.callback_query):
    cards = db.get_cards()
    for card in cards:
        if card[1] + 'C' == call.data:
            card_number = db.get_card_number(card[1])
            change_card_markup = types.InlineKeyboardMarkup() \
                .add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='change_card_name')) \
                .add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤', callback_data='change_card_limit')) \
                .add(types.InlineKeyboardButton(text='üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É', callback_data='delete_card'))

            await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        text=f'–ö–∞—Ä—Ç–∞ {card[1]}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {card[0]}\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {card_number}'
                                             f'\n\n–õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {card[2]} —Å–æ–º.', reply_markup=change_card_markup)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data in ['change_card_name',
                                                                                         'change_card_limit',
                                                                                         'delete_card',
                                                                                         'confirm_delete',
                                                                                         'cancel_delete'])
async def edit_card(call: types.callback_query, state: FSMContext):
    card_id = get_card_id_from_message(call.message.text)
    card_number = db.get_card_number(card_id)
    if call.data == 'change_card_name':
        await bot.send_message(chat_id=call.from_user.id, text=f'–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã {card_number}')
        await CardEdit.ChangeCardName.set()
        await state.update_data(card_id=card_id)

    if call.data == 'change_card_limit':
        await bot.send_message(call.from_user.id, text=f'–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∫–∞—Ä—Ç—ã {card_number}')
        await CardEdit.ChangeCardLimit.set()
        await state.update_data(card_id=card_id)


    if call.data == 'delete_card':
        confirm_delete_markup = types.InlineKeyboardMarkup()\
            .add(types.InlineKeyboardButton(text='üóë–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ', callback_data='confirm_delete'))\
            .add(types.InlineKeyboardButton(text='üö´–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ', callback_data='cancel_delete'))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–ö–∞—Ä—Ç–∞ {card_id}\n\n–•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É {card_number} ?',
                                    reply_markup=confirm_delete_markup)

    if call.data == 'confirm_delete':
        db.delete_card(card_id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–ö–∞—Ä—Ç–∞ {card_number} —É–¥–∞–ª–µ–Ω–∞!')

    if call.data == 'cancel_delete':
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state=CardEdit.ChangeCardName)
async def handle_card_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    card_id = user_data['card_id']
    db.change_card_name(card_id, message.text)
    card_number = db.get_card_number(card_id)
    await bot.send_message(message.from_user.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã {card_number} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞\n\n{message.text}')
    await state.finish()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state=CardEdit.ChangeCardLimit)
async def handle_card_limit(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    card_id = user_data['card_id']
    try:
        limit = int(message.text)
    except ValueError:
        await bot.send_message(message.from_user.id, f'{message.text} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!')
        return
    db.change_card_limit(card_id, limit)
    card_number = db.get_card_number(card_id)
    await bot.send_message(message.from_user.id, f'–õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞—Ä—Ç—ã {card_number} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n\n{limit} —Å–æ–º.')
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state=CardAdd.EnterCardName)
async def handle_card_name(message: types.Message, state: FSMContext):
    await state.update_data(card_name=message.text.upper())

    user_data = await state.get_data()
    edit_message_id = user_data['edit_message_id']
    edit_message_text = user_data['edit_message_text']
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=edit_message_id, text=edit_message_text)
    edit_message = await bot.send_message(message.from_user.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä'
                                               f' –∫–∞—Ä—Ç—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.', reply_markup=cancel_card_add_markup)

    await CardAdd.Credentials.set()
    await state.update_data(edit_message_id=edit_message.message_id, edit_message_text=edit_message.text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state=CardAdd.Credentials)
async def handle_credentials(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await bot.send_message(message.from_user.id, f'{message.text} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!')
        return
    if len(message.text) != 16:
        await bot.send_message(message.from_user.id, text='–ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ 16 —á–∏—Å–µ–ª')
        return
    await state.update_data(card_number=message.text)
    user_data = await state.get_data()
    edit_message_id = user_data['edit_message_id']
    edit_message_text = user_data['edit_message_text']
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=edit_message_id, text=edit_message_text)
    edit_message = await bot.send_message(message.from_user.id,
                                          text=f'–ù–æ–º–µ—Ä {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–í–≤–µ–¥–∏ –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É'
                                               f'(–≤ —Å–æ–º–æ–ª–∏).', reply_markup=cancel_card_add_markup)

    await CardAdd.SetLimit.set()
    await state.update_data(edit_message_id=edit_message.message_id, edit_message_text=edit_message.text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state=CardAdd.SetLimit)
async def handle_set_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text)
    except ValueError:
        await bot.send_message(message.from_user.id, f'{message.text} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!')
        return
    await state.update_data(card_limit=limit)

    user_data = await state.get_data()
    card_name = user_data['card_name']
    card_number = user_data['card_number']
    edit_message_id = user_data['edit_message_id']
    edit_message_text = user_data['edit_message_text']

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=edit_message_id, text=edit_message_text)
    confirm_add_card_markup = types.InlineKeyboardMarkup() \
        .add(types.InlineKeyboardButton(text="‚úÖ–î–æ–±–∞–≤–∏—Ç—å", callback_data='confirm_add_card')) \
        .add(cancel_card_add_btn)
    edit_message = await bot.send_message(message.from_user.id,
                                          text=f'–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É: {card_name}\n\n–ù–æ–º–µ—Ä: {card_number}\n\n–õ–∏–º–∏—Ç '
                                               f'–ø–µ—Ä–µ–≤–æ–¥–æ–≤: {limit}', reply_markup=confirm_add_card_markup)

    await CardAdd.ConfirmAddCard.set()
    await state.update_data(edit_message_id=edit_message.message_id, edit_message_text=edit_message.text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data == 'confirm_add_card',
                           state=CardAdd.ConfirmAddCard)
async def handle_confirm_card_add(call: types.callback_query, state: FSMContext):
    user_data = await state.get_data()
    card_name = user_data['card_name']
    card_number = user_data['card_number']
    card_limit = user_data['card_limit']
    edit_message_id = user_data['edit_message_id']
    edit_message_text = user_data['edit_message_text']
    db.add_card(card_number, card_limit, card_name)
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=f'–ö–∞—Ä—Ç–∞ {card_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ù–æ–º–µ—Ä: {card_number}\n\n–õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤:'
                                     f' {card_limit}')
    await state.finish()


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data == 'cancel_add_button',
                           state=[CardAdd.ConfirmAddCard, CardAdd.SetLimit, CardAdd.Credentials, CardAdd.EnterCardName])
async def handle_cancel_card_add(call: types.callback_query, state: FSMContext):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.')
    await state.finish()


def get_id_from_message(message):
    return re.search(r'(?<=N)\d+', message).group(0)


def get_unique_id_from_message(message):
    return re.search(r'(?<=Q)\d+', message).group(0)


def get_card_id_from_message(message):
    return re.search(r'(?<=–ö–∞—Ä—Ç–∞ )\w+-\d+', message).group(0)