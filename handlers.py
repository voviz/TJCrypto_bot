from aiogram import types
from aiogram.dispatcher import FSMContext

from load_all import dp, bot, db
from states import TradeRequest
from config import ADMIN_IDS

from converter import get_coin_to_usd, get_currency_to_usd

main_menu_text = "<b>–ë–æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫!</b>\n\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ <b>TZS</b> –Ω–∞ " \
                 "<b>BTC</b>.\n\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É \"<b>–ö—É–ø–∏—Ç—å –ë–∏—Ç–∫–æ–∏–Ω</b>\" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ " \
                 "—Å—É–º–º—É –≤ <b>TZS</b> –∏–ª–∏ <b>BTC</b>.\n\n<b>–ü—Ä–∏–º–µ—Ä:</b> 0.001 –∏–ª–∏ 0,001 " \
                 "–∏–ª–∏ 2070."
buy_btc_text = "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ BTC –∏–ª–∏ –∂–µ TZS\n\n<code>–ü—Ä–∏–º–µ—Ä: 0.001 –∏–ª–∏ 0,001 –∏–ª–∏ 2070</code>"

cancel_button = types.InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∞", callback_data="cancel")
confirm_button = types.InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω‚úÖ", callback_data="confirm_trade")
buy_btc_btn = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ë–∏—Ç–∫–æ–∏–Ω", callback_data="buy_btc")
main_menu_markup = types.InlineKeyboardMarkup(inline_keyboard=[[buy_btc_btn]])
confirm_trade_markup = types.InlineKeyboardMarkup(inline_keyboard=[[cancel_button, confirm_button]])

# mega_cancel = types.InlineKeyboardMarkup().add(
#     types.InlineKeyboardButton(text='üö´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='mega_cancel'))

start_execution = types.InlineKeyboardMarkup().add(
    types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='start_execution')
)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await bot.send_message(message.from_user.id, main_menu_text, parse_mode='html', reply_markup=main_menu_markup)
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                    message.from_user.username, message.chat.id)


@dp.callback_query_handler(lambda call: call.data == 'pressed_wallet', state=TradeRequest.EnterWallet)
async def handle_wallet(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'pressed_wallet':
        # –í–≤–µ–¥–µ–Ω –∫–æ—à–µ–ª–µ–∫
        await TradeRequest.TradeConfirmation.set()

        sum_to_pay = get_sum_to_pay(call.from_user.id)

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ <b>15 –º–∏–Ω—É—Ç!</b>\n\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ "
                                         f"<b>{sum_to_pay} —Å–æ–º.</b>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞"
                                         f" –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: <code>{db.get_wallet(call.from_user.id)}"
                                         f"</code>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, "
                                         f"–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @voviz\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±–º–µ–Ω?",
                                    parse_mode='html', reply_markup=confirm_trade_markup)


@dp.callback_query_handler(lambda callback_query: True, state=TradeRequest.TradeConfirmation)
async def handle_confirm_cancel_trade(call: types.CallbackQuery, state: FSMContext):
    # –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if call.data == 'confirm_trade':
        await TradeRequest.Payment.set()

        sum_to_pay = get_sum_to_pay(call.from_user.id)
        db.set_sum_to_pay(call.from_user.id, sum_to_pay)

        unique_id = db.create_request(call.from_user.id, db.get_wallet(call.from_user.id), db.get_sum_btc(call.from_user.id))

        message_to_edit = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text=f"–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{unique_id} <b>15 –º–∏–Ω—É—Ç!</b>\n\n–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è "
                                                           f"{db.get_sum_btc(call.from_user.id)} BTC, –í–∞–º –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>{sum_to_pay}</b> —Å–æ–º."
                                                           f"\n\n–ü—Ä–æ–º–æ–∫–æ–¥: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{sum_to_pay}</b> —Å–æ–º."
                                                           f"\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: <code>{db.get_wallet(call.from_user.id)}"
                                                           f"</code>\n\n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
                                                           f" @Voviz\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", parse_mode='html')
        message_to_delete = await bot.send_message(call.message.chat.id, text="2202202171329380")

        db.set_messages_to_delete(unique_id, message_to_edit.message_id, message_to_delete.message_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å N{call.from_user.id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É Q{unique_id}.\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂ <b>{sum_to_pay}</b>"

        for chat_id in ADMIN_IDS:
            await bot.send_message(chat_id, text=text, reply_markup=start_execution, parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@dp.callback_query_handler(lambda callback_query: True, state='*')
async def callback_handler(call: types.CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ
    current_state = await state.get_state()
    if current_state == TradeRequest.Payment.state:
        # if call.data == 'mega_cancel':
        #     await state.finish()
        # if not call.data == "cancel":
        await bot.answer_callback_query(call.id, text="–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é.", show_alert=True)
        return
        # await bot.send_message(call.message.chat.id, text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑?\n\n–ï—Å–ª–∏ —É –í–∞—Å "
        #                                                   "–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å "
        #                                                   "–∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ @Voviz\n\n"
        #                                                   "–ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –∏ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑, —Å—Ä–µ–¥—Å—Ç–≤–∞ <b>–Ω–µ "
        #                                                   "–±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.</b>",
        #                        parse_mode='html', reply_markup=mega_cancel)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫—É–ø–∏—Ç—å –±—Ç—Å –≤ –≥–ª–∞–≤–Ω–æ–º
    if call.data == "buy_btc":
        await bot.send_message(chat_id=call.message.chat.id, text=buy_btc_text, parse_mode='html')

    # –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    if call.data == "cancel":
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                    reply_markup=main_menu_markup)
        await state.finish()

    # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –±–∞–Ω–∫
    if call.data == 'sber':
        answer = "<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ BTC.</b> –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–º–µ–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç" \
                 " –≤ –≤–∏–¥–µ <b>—É–¥–æ–±–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É:</b>"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
        wallet_markup = types.InlineKeyboardMarkup(row_width=2)
        if db.get_wallet(call.from_user.id):
            btn = types.InlineKeyboardButton(text=db.get_wallet(call.from_user.id), callback_data="pressed_wallet")
            wallet_markup.add(btn)
        wallet_markup.add(cancel_button)

        await TradeRequest.EnterWallet.set()

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=answer,
                                    parse_mode='html', reply_markup=wallet_markup)


@dp.message_handler(state=TradeRequest.EnterWallet)
async def handle_wallet(message: types.Message):
    if not check_btc_wallet(message.text):
        pass

    # –í–≤–µ–¥–µ–Ω –∫–æ—à–µ–ª–µ–∫
    await TradeRequest.TradeConfirmation.set()
    db.change_wallet(message.from_user.id, message.text)

    sum_to_pay = get_sum_to_pay(message.from_user.id)

    await bot.send_message(message.from_user.id, text=f"–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ <b>15 –º–∏–Ω—É—Ç!</b>\n\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ "
                                                      f"<b>{sum_to_pay} —Å–æ–º.</b>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞"
                                                      f" –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: <code>{db.get_wallet(message.from_user.id)}"
                                                      f"</code>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, "
                                                      f"–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @voviz\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±–º–µ–Ω?",
                           parse_mode='html', reply_markup=confirm_trade_markup)

    # # –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    # if call.data == "cancel":
    #     await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
    #                                 text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    #                                 reply_markup=main_menu_markup)
    #     await state.finish()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=TradeRequest.Payment)
async def handle_active_order(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑.\n\n'
                                '–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–∏—à–∏—Ç–µ '
                                '–ø–æ–¥–¥–µ—Ä–∂–∫–µ @Voviz')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler()
async def handle_buy_amount(message: types.Message):
    btc_to_usd_rate = get_coin_to_usd('btc')
    usd_to_tjs_rate = get_currency_to_usd('TJS')
    btc_amount = get_amount_in_btc(message.text, btc_to_usd_rate, usd_to_tjs_rate)
    float_btc = float(btc_amount)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã
    if float_btc > 0.09 or float_btc < 0.0001:
        await bot.send_message(message.from_user.id, f"–ù–µ –≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ - {btc_amount}!\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ BTC"
                                                     f" 0.0001, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 0.09")
        await bot.send_message(message.from_user.id, buy_btc_text, parse_mode='html')
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞
    db.change_sum_btc(message.from_user.id, float_btc)

    # –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
    to_pay = get_sum_to_pay(message.from_user.id)
    to_pay = to_pay[:-3] + ' ' + to_pay[-3:]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤—ã —Å –≤—ã–±–æ—Ä–æ–º –≥–¥–µ –∫—É–ø–∏—Ç—å
    payment_option_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f'–°–ë–ï–†–ë–ê–ù–ö –ï–ü–¢–ê ({to_pay} —Å–æ–º.)', callback_data='sber')],
            [cancel_button]
        ]
    )

    await bot.send_message(message.from_user.id, f"–°—Ä–µ–¥–Ω–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å BTC ${btc_to_usd_rate}, $ - "
                                                 f"{usd_to_tjs_rate:.1f} —Å–æ–º.\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{btc_amount} BTC.</b>"
                                                 f"\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
                           parse_mode='html',
                           reply_markup=payment_option_markup)


def get_amount_in_btc(amount, btc_rate, currency_rate):
    try:  # –í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–æ —Å–æ–º–æ–ª–∏ –≤ Int
        amount = int(amount)
        return f"{amount / currency_rate / btc_rate:.8f}"
    except ValueError:
        try:  # –í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ç—Å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
            amount = float(amount)
            return f"{amount:.8f}"
        except ValueError:
            try:  # –í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ç—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                amount = float(amount.replace(',', '.', 1))
                return f"{amount:.8f}"
            except ValueError:  # –û–ø—è—Ç—å –Ω–∞—Å—Ä–∞–ª–∏
                return "0.00000000"


def get_sum_to_pay(user_id):
    fee_rate = 1.3
    sum_to_pay = f"{db.get_sum_btc(user_id) * get_coin_to_usd('btc') * get_currency_to_usd('tjs') * fee_rate:.0f}"
    return sum_to_pay


def check_btc_wallet(text):
    return True
